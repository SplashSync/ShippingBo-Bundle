################################################################################
#
#  This file is part of SplashSync Project.
#
#  Copyright (C) Splash Sync <www.splashsync.com>
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  For the full copyright and license information, please view the LICENSE
#  file that was distributed with this source code.
#
#  @author Bernard Paquier <contact@splashsync.com>
#
################################################################################

################################################################
# Include Pipeline Templates
include:
    - remote: 'https://raw.githubusercontent.com/BadPixxel/Php-Sdk/main/gitlab/pages.yaml'

################################################################
# Set any variables we need
variables:
  # Configure mysql environment variables (https://hub.docker.com/r/_/mysql/)
  MYSQL_DATABASE:               symfony
  MYSQL_ROOT_PASSWORD:          ShippingBo-Bundle
  COMPOSER_MEMORY_LIMIT:        -1
  SYMFONY_DEPRECATIONS_HELPER:  disabled

################################################################
# Defined Pipeline Stages
stages:
  - Quality
  - Functional
  - Builds

################################################################
# Functional Tests
################################################################

.quality:    &quality
    stage:      Quality
    tags:
        - Dedicated
    ################################################################################
    # Install & Configure Environment
    before_script:
        # Install Symfony
        - composer update
    ################################################################################
    # Run Test Script
    script:
        # Execute Grumphp Testsuite
        - wall-e grumphp:quality
        - wall-e grumphp:stan
    ################################################################################
    # Run After Script
    after_script:
        - curl -s https://raw.githubusercontent.com/BadPixxel/Php-Sdk/main/ci/after.sh | sh

################################################################################
# PHP 8.2
quality:php-8.2:
  image: registry.gitlab.com/badpixxel-projects/php-sdk:php-8.2
  <<: *quality

################################################################################
# PHP 8.1
quality:php-8.1:
  image: registry.gitlab.com/badpixxel-projects/php-sdk:php-8.1
  <<: *quality


################################################################
# Functional Tests
################################################################
functional:
    image:      docker:stable
    stage:      Functional
    retry:      2
    tags:
        - Dedicated
    services:
        - docker:dind
    ################################################################################
    # Install & Configure Environment
    before_script:
        # Install Git, Bash, Curl & Docker Compose
        - apk add --no-cache curl bash git docker-compose
        - echo "SBO_STAGING_API_USER=None"  >> .env
        - echo "SBO_STAGING_API_KEY=None"   >> .env
        - echo "SHOPIFY_API_SECRET=None"    >> .env
        # Install & Build Docker Compose
        - curl -s https://raw.githubusercontent.com/BadPixxel/Php-Sdk/main/toolkit/build.sh  | bash

    ################################################################################
    # Run Test Script
    script:
        # Wait for container to Start
        - sleep 10
        - docker-compose exec -T toolkit curl http://openapi/
        # Execute PhpUnit Tests
        - docker-compose exec -T toolkit php vendor/bin/phpunit tests/Controller/S00MinimalObjectsTest.php
        - curl -s https://raw.githubusercontent.com/BadPixxel/Php-Sdk/main/toolkit/phpunit.sh  | bash
        # Build Splash Manifest
        - curl -s https://raw.githubusercontent.com/BadPixxel/Php-Sdk/main/toolkit/manifest.sh  | bash

    ################################################################################
    # Run After Script
    after_script:
        - curl -s https://raw.githubusercontent.com/BadPixxel/Php-Sdk/main/toolkit/after.sh  | bash
    artifacts:
        paths:
            - logs
            - manifest
            - reports
        reports:
            junit: "*-report.xml"

